{"version":3,"sources":["webpack:///./src/services/PaymentService.js","webpack:///./src/pages/account/success-upgrade.vue?bc76","webpack:///./src/pages/account/success-upgrade.vue?5469","webpack:///src/pages/account/success-upgrade.vue","webpack:///./src/pages/account/success-upgrade.vue?6fde","webpack:///./src/pages/account/success-upgrade.vue"],"names":["async","getSubscriptionInformation","stripeCustomerId","http","get","setSubscription","then","response","data","payload","console","log","auth","setTimeout","router","push","name","routerItems","EXPLORER_PROJECTS","upgradeSubscription","getHelloScribePlans","getInvoices","customerId","secondsToISOString","seconds","date","Date","toISOString","substring","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","staticClass","_v","methods","computed","component"],"mappings":"kHAAA,4QAwVOA,eAAeC,EAA2BC,GAC/C,aAAaC,iBAAOC,IACjB,sCAAqCF,GAInCF,eAAeK,EAAgBH,SAC9BC,iBAAOC,IAAK,qBAAoBF,GACnCI,KAAMC,IACDA,EAASC,KAAKC,UAChBC,QAAQC,IAAI,UAAWJ,EAASC,KAAKC,SACrCG,OAAgBL,EAASC,KAAKC,SAC9BI,WAAW,KACTC,OAAOC,KAAK,CAAEC,KAAMC,OAAYC,qBAC/B,QAMJlB,eAAemB,EAAoBjB,SAClCC,iBAAOC,IAAK,yBAAwBF,GACvCI,KAAMC,IACDA,EAASC,KAAKC,UAChBG,OAAgBL,EAASC,KAAKC,SAC9BI,WAAW,KACTC,OAAOC,KAAK,CAAEC,KAAMC,OAAYC,qBAC/B,QAsCJ,SAASE,IACd,OAAOjB,iBAAOC,IAAI,sBAIb,SAASiB,EAAYC,GAC1B,OAAOnB,iBAAOC,IAAK,iBAAgBkB,GAG9B,SAASC,EAAmBC,GACjC,MAAMC,EAAO,IAAIC,KAAe,IAAVF,GACtB,OAAOC,EAAKE,cAAcC,UAAU,EAAG,M,oCCpazC,W,yCCAA,IAAIC,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAsBH,EAAII,MAAMC,GAAO,OAAOL,EAAIM,GAAG,IACnGC,EAAkB,CAAC,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBE,EAAGL,EAAII,MAAMC,IAAIH,EAAG,OAAOG,EAAG,MAAM,CAACG,YAAY,gBAAgB,CAACH,EAAG,KAAK,CAACL,EAAIS,GAAG,sBAAsBJ,EAAG,IAAI,CAACG,YAAY,8BAA8B,CAACR,EAAIS,GAAG,wDAAwDJ,EAAG,MAAML,EAAIS,GAAG,4C,wBCYzT,GACEvB,KAAM,6BACN,UACE,EAAJ,sCAEEwB,QAAS,GAETC,SAAU,IACZ,gBACM,SAAN,qBCtBwW,I,wBCQpWC,EAAY,eACd,EACAb,EACAQ,GACA,EACA,KACA,WACA,MAIa,aAAAK,E","file":"js/chunk-5c8e0489.7b9a4d8c.js","sourcesContent":["import { http } from '../services/HttpService';\nimport store from '../store/index';\nimport * as auth from '../services/AuthService';\nimport router from '../router/index';\nimport routerItems from '../constants/routerItems';\n//Manage Payment Authentication\nfunction handlePaymentThatRequiresCustomerAction({\n  subscription,\n  invoice,\n  priceId,\n  paymentMethodId,\n  stripe,\n  stripeObj,\n  isRetry,\n}) {\n  if (subscription && subscription.status === 'active') {\n    // subscription is active, no customer actions required.\n    stripeObj.loading = false;\n    return { subscription, priceId, paymentMethodId, stripeObj };\n  }\n\n  // If it's a first payment attempt, the payment intent is on the subscription latest invoice.\n  // If it's a retry, the payment intent will be on the invoice itself.\n  const paymentIntent = invoice\n    ? invoice.payment_intent\n    : subscription.latest_invoice.payment_intent;\n\n  if (\n    paymentIntent.status === 'requires_action' ||\n    (isRetry === true && paymentIntent.status === 'requires_payment_method')\n  ) {\n    return stripe\n      .confirmCardPayment(paymentIntent.client_secret, {\n        payment_method: paymentMethodId,\n      })\n      .then((result) => {\n        if (result.error) {\n          stripeObj.errMsg = result.error.message;\n          stripeObj.loading = false;\n          // start code flow to handle updating the payment details\n          // Display error message in your UI.\n          // The card was declined (i.e. insufficient funds, card has expired, etc)\n          throw result;\n        } else {\n          if (result.paymentIntent.status === 'succeeded') {\n            stripeObj.loading = false;\n            // There's a risk of the customer closing the window before callback\n            // execution. To handle this case, set up a webhook endpoint and\n            // listen to invoice.payment_succeeded. This webhook endpoint\n            // returns an Invoice.\n            return {\n              priceId: priceId,\n              subscription: subscription,\n              invoice: invoice,\n              paymentMethodId: paymentMethodId,\n              stripeObj,\n            };\n          }\n        }\n      })\n      .catch((error) => {\n        stripeObj.errMsg = error.error.message;\n        stripeObj.loading = false;\n      });\n  } else {\n    // No customer action needed\n    return { subscription, priceId, paymentMethodId, stripeObj };\n  }\n}\n//Catch the error, let your customer know their card was declined, and return them to the payment form to try a different card.\nfunction handleRequiresPaymentMethod({\n  subscription,\n  paymentMethodId,\n  priceId,\n  stripeObj,\n}) {\n  if (subscription.status === 'active') {\n    stripeObj.loading = false;\n    // subscription is active, no customer actions required.\n    return { subscription, priceId, paymentMethodId, stripeObj };\n  } else if (\n    subscription.latest_invoice.payment_intent.status ===\n    'requires_payment_method'\n  ) {\n    // Using localStorage to store the state of the retry here\n    // (feel free to replace with what you prefer)\n    // Store the latest invoice ID and status\n    localStorage.setItem('latestInvoiceId', subscription.latest_invoice.id);\n    localStorage.setItem(\n      'latestInvoicePaymentIntentStatus',\n      subscription.latest_invoice.payment_intent.status\n    );\n    stripeObj.errMsg = 'Your card was declined, try a different card.';\n    stripeObj.loading = false;\n    throw new Error('Your card was declined, try a different card.');\n  } else {\n    stripeObj.loading = false;\n    return { subscription, priceId, paymentMethodId, stripeObj };\n  }\n}\n//Attach the new card to the customer and update the invoice setting.\nfunction retryInvoiceWithNewPaymentMethod({\n  customerId,\n  paymentMethodId,\n  invoiceId,\n  priceId,\n  stripe,\n  stripeObj,\n}) {\n  return (\n    http()\n      .post('/retry-invoice', {\n        customerId: customerId,\n        paymentMethodId: paymentMethodId,\n        invoiceId: invoiceId,\n      })\n      .then((response) => {\n        return response;\n      })\n      // If the card is declined, display an error to the user.\n      .then((result) => {\n        if (result.error) {\n          // The card had an error when trying to attach it to a customer.\n          throw result;\n        }\n        return result;\n      })\n      // Normalize the result to contain the object returned by Stripe.\n      // Add the additional details we need.\n      .then((result) => {\n        return {\n          // Use the Stripe 'object' property on the\n          // returned result to understand what object is returned.\n          subscription: result.data.subscription,\n          invoice: result.data.invoice,\n          paymentMethodId: paymentMethodId,\n          priceId: priceId,\n          stripe,\n          stripeObj,\n          isRetry: true,\n        };\n      })\n      // Some payment methods require a customer to be on session\n      // to complete the payment process. Check the status of the\n      // payment intent to handle these actions.\n      .then(handlePaymentThatRequiresCustomerAction)\n      // No more actions required. Provision your service for the user.\n      .then(onSubscriptionComplete)\n      .catch((error) => {\n        // An error has happened. Display the failure to the user here.\n        // We utilize the HTML element we created.\n        //displayError(error);\n        console.log(\n          'An error has happened. Display the failure to the user here.',\n          error\n        );\n      })\n  );\n}\n//Provision Access To Your Service\nfunction onSubscriptionComplete(result) {\n  // Payment was successful.\n  // Payment was successful. Provision access to your service.\n  // Remove invoice from localstorage because payment is now complete.\n  // clearCache();\n  if (result && !result.subscription) {\n    const subscription = { id: result.invoice.subscription };\n    result.subscription = subscription;\n    window.localStorage.removeItem('latestInvoiceId');\n    window.localStorage.removeItem('latestInvoicePaymentIntentStatus');\n  }\n  if (result.subscription.status === 'active') {\n    // Change your UI to show a success message to your customer.\n    // Call your backend to grant access to your service based on\n    // `result.subscription.items.data[0].price.product` the customer subscribed to.\n  }\n  setAccountInformation(result);\n  // Change your UI to show a success message to your customer.\n  // onSubscriptionSampleDemoComplete(result);\n  // Call your backend to grant access to your service based on\n  // the product your customer subscribed to.\n  // Get the product by using result.subscription.price.product\n}\n//Save the payment details and Create Subscription\nexport function createSubscription({\n  customerId,\n  paymentMethodId,\n  user,\n  stripe,\n  stripeObj,\n  couponCode = null,\n}) {\n  const plan = JSON.parse(user.plan);\n  return (\n    http()\n      .post('/create-subscription', {\n        customerId: customerId,\n        paymentMethodId: paymentMethodId,\n        priceId: plan.id,\n        couponCode: couponCode,\n      })\n      .then((response) => {\n        return response;\n      })\n      // If the card is declined, display an error to the user.\n      .then((result) => {\n        if (result.error) {\n          this.$swal.fire({\n            position: 'top-end',\n            icon: 'error',\n            title: result.error.message,\n            showConfirmButton: false,\n            timer: 2000,\n          });\n          // The card had an error when trying to attach it to a customer\n          throw result;\n        }\n        return result;\n      })\n      // Normalize the result to contain the object returned\n      // by Stripe. Add the addional details we need.\n      .then((result) => {\n        return {\n          // Use the Stripe 'object' property on the\n          // returned result to understand what object is returned.\n          subscription: result.data.subscription,\n          paymentMethodId: paymentMethodId,\n          priceId: plan.id,\n          stripe: stripe,\n          stripeObj: stripeObj,\n        };\n      })\n      // Some payment methods require a customer to do additional\n      // authentication with their financial institution.\n      // Eg: 2FA for cards.\n      .then(handlePaymentThatRequiresCustomerAction)\n      // If attaching this card to a Customer object succeeds,\n      // but attempts to charge the customer fail. You will\n      // get a requires_payment_method error.\n      .then(handleRequiresPaymentMethod)\n      // No more actions required. Provision your service for the user.\n      .then(onSubscriptionComplete)\n      .catch((error) => {\n        // An error has happened. Display the failure to the user here.\n        // We utilize the HTML element we created.\n        //setErrorToDisplay(error.message || error.error.decline_code);\n        stripeObj.loading = false;\n        console.log('CATCH ERROR (createSubscription)', error);\n      })\n  );\n}\nexport async function handleSubmit(\n  stripeObj,\n  stripeComponent,\n  user,\n  couponCode = null\n) {\n  stripeObj.errMsg = null;\n  stripeObj.subscribing = true;\n  stripeObj.loading = true;\n  // Get a reference to a mounted CardElement. Elements knows how\n  // to find your CardElement because there can only ever be one of\n  // each type of element.\n  const cardElement = stripeComponent.cardElement;\n  const stripe = stripeComponent.stripe;\n  const customerId = store.state.stripeCustomerId;\n  //const customerId = \"cus_ITxVHWKQTU1FXS\";\n\n  // Get current user\n  const currentUser = auth.getUserObj();\n  // If User Have Previous Subscription\n  if (currentUser.plan) {\n    this.$swal.fire({\n      position: 'top-end',\n      icon: 'info',\n      title: `Your Are Already on ${currentUser.plan} Plan`,\n      showConfirmButton: false,\n      timer: 2000,\n    });\n    return;\n  }\n\n  // If a previous payment was attempted, get the lastest invoice\n  const latestInvoicePaymentIntentStatus = localStorage.getItem(\n    'latestInvoicePaymentIntentStatus'\n  );\n\n  // Use your card Element with other Stripe.js APIs\n  const { error, paymentMethod } = await stripe.createPaymentMethod({\n    type: 'card',\n    card: cardElement,\n  });\n\n  if (error) {\n    stripeObj.subscribing = false;\n    stripeObj.loading = false;\n    return;\n  }\n  const paymentMethodId = paymentMethod.id;\n  if (latestInvoicePaymentIntentStatus === 'requires_payment_method') {\n    // Update the payment method and retry invoice payment\n    const invoiceId = localStorage.getItem('latestInvoiceId');\n    retryInvoiceWithNewPaymentMethod({\n      customerId,\n      paymentMethodId: paymentMethodId,\n      invoiceId: invoiceId,\n      stripe,\n      stripeObj,\n    });\n    return;\n  }\n\n  // Create the subscription\n  createSubscription({\n    customerId,\n    paymentMethodId: paymentMethodId,\n    user,\n    stripe,\n    stripeObj,\n    couponCode,\n  });\n}\n//Refresh Token And Grant Access\nexport async function setAccountInformation(result) {\n  var subscriptionId = result.subscription.id;\n  if (!subscriptionId) {\n    subscriptionId = result.invoice.subscription;\n  }\n  await http()\n    .post('/verify-subscription', {\n      subscriptionId: subscriptionId,\n    })\n    .then((response) => {\n      if (response.data.payload) {\n        auth.setSession(response.data.payload);\n        router.push({ name: routerItems.SUBSCRIPTION_SUCCESS });\n      }\n    });\n}\n\nexport function getCouponInformation(couponCode) {\n  return http().get(`retrieve-coupon-info/${couponCode}`);\n}\n// Get Subscription Information\nexport async function getSubscriptionInformation(stripeCustomerId) {\n  return await http().get(\n    `/retrieve-subscription-information/${stripeCustomerId}`\n  );\n}\n// Set Subscription Information\nexport async function setSubscription(stripeCustomerId) {\n  await http().get(`/set-subscription/${stripeCustomerId}`)\n    .then((response) => {\n      if (response.data.payload) {\n        console.log(\"canel: \", response.data.payload);\n        auth.setSession(response.data.payload);\n        setTimeout(() => {\n          router.push({ name: routerItems.EXPLORER_PROJECTS });\n        }, 2000);\n      }\n    });\n}\n\n// UPgrade Subscription Information\nexport async function upgradeSubscription(stripeCustomerId) {\n  await http().get(`/upgrade-subscription/${stripeCustomerId}`)\n    .then((response) => {\n      if (response.data.payload) {\n        auth.setSession(response.data.payload);\n        setTimeout(() => {\n          router.push({ name: routerItems.EXPLORER_PROJECTS });\n        }, 2000);\n      }\n    });\n}\n//Cancel the subscription\nexport async function cancelSubscription(subscriptionId) {\n  return await http().put('/cancel-subscription', {\n    subscriptionId: subscriptionId,\n  });\n}\n//Reactivate subscription\nexport async function reactivateSubscription(subscriptionId) {\n  return await http().put('/reactivate-subscription', {\n    subscriptionId: subscriptionId,\n  });\n}\n//Update Subscription\nexport async function updateSubscription(\n  priceId,\n  subscriptionId,\n  stripeCustomerId\n) {\n  return await http().put('/update-subscription', {\n    subscriptionId: subscriptionId,\n    newPriceId: priceId,\n    stripeCustomerId: stripeCustomerId,\n  });\n}\n//Get Config (PK KEY)\nexport async function getConfig() {\n  return http().get('/config');\n}\n//Get Plans & Products\nexport function getPlans() {\n  return http().get('/plans');\n}\n\n//Get HelloScribe Plans & Products\nexport function getHelloScribePlans() {\n  return http().get('/helloscribe-plans');\n}\n\n//Get Invoices\nexport function getInvoices(customerId) {\n  return http().get(`/get-invoices/${customerId}`);\n}\n//Converting the Stripe epoch timestamp to ISO 8601\nexport function secondsToISOString(seconds) {\n  const date = new Date(seconds * 1000);\n  return date.toISOString().substring(0, 10);\n}\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./success-upgrade.vue?vue&type=style&index=0&id=5b742e21&lang=scss&scoped=true&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"success-page\"},[_c('h3',[_vm._v(\"Congratulations!\")]),_c('p',{staticClass:\"text-info font-weight-bold\"},[_vm._v(\" You have successfully updated current subscription.\"),_c('br'),_vm._v(\" Please wait for a few seconds... \")])])}]\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"success-page\">\n    <h3>Congratulations!</h3>\n    <p class=\"text-info font-weight-bold\">\n      You have successfully updated current subscription.<br />\n      Please wait for a few seconds...\n    </p>\n  </div>\n</template>\n<script>\nimport * as paymentService from \"../../services/PaymentService\";\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  name: \"SubscriptionSuccessUpgrade\",\n  mounted() {\n    paymentService.upgradeSubscription(this.userInfo.stripeCustomerId);\n  },\n  methods: {\n  },\n  computed: {\n      ...mapGetters({\n          userInfo: \"getCurrentUser\",\n      })\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\nh3 {\n  color: #878686;\n}\n.success-page {\n  min-height: calc(100vh - 170px);\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./success-upgrade.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./success-upgrade.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./success-upgrade.vue?vue&type=template&id=5b742e21&scoped=true&\"\nimport script from \"./success-upgrade.vue?vue&type=script&lang=js&\"\nexport * from \"./success-upgrade.vue?vue&type=script&lang=js&\"\nimport style0 from \"./success-upgrade.vue?vue&type=style&index=0&id=5b742e21&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5b742e21\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}